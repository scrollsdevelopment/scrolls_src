unsigned int static KimotoGravityWell(const CBlockIndex* pindexLast, const CBlock *pblock, uint64 TargetBlocksSpacingSeconds, uint64 PastBlocksMin, uint64 PastBlocksMax) {
        /* current difficulty formula, megacoin - kimoto gravity well */
    const CBlockIndex *BlockLastSolved = pindexLast;
    const CBlockIndex *BlockReading = pindexLast;
    const CBlock *BlockCreating = pblock;
                                            BlockCreating = BlockCreating;
    uint64 PastBlocksMass = 0;
    int64 PastRateActualSeconds = 0;
    int64 PastRateTargetSeconds = 0;
    double PastRateAdjustmentRatio = double(1);
    CBigNum PastDifficultyAverage;
    CBigNum PastDifficultyAveragePrev;
    double EventHorizonDeviation;
    double EventHorizonDeviationFast;
    double EventHorizonDeviationSlow;

    if (BlockLastSolved == NULL || BlockLastSolved->nHeight == 0 || (uint64)BlockLastSolved->nHeight < PastBlocksMin) { return bnProofOfWorkLimit.GetCompact(); }
        int64 LatestBlockTime = BlockLastSolved->GetBlockTime();
        for (unsigned int i = 1; BlockReading && BlockReading->nHeight > 0; i++) {
                if (PastBlocksMax > 0 && i > PastBlocksMax) { break; }
                PastBlocksMass++;
                
                if (i == 1) { PastDifficultyAverage.SetCompact(BlockReading->nBits); }
                else { PastDifficultyAverage = ((CBigNum().SetCompact(BlockReading->nBits) - PastDifficultyAveragePrev) / i) + PastDifficultyAveragePrev; }
                PastDifficultyAveragePrev = PastDifficultyAverage;
                //Exploit fix https://bitcointalk.org/index.php?topic=552895
                if (LatestBlockTime < BlockReading->GetBlockTime()) {
                                if (BlockReading->nHeight > 48300)
                                        LatestBlockTime = BlockReading->GetBlockTime();
                        }
                PastRateActualSeconds = LatestBlockTime - BlockReading->GetBlockTime();
                PastRateTargetSeconds			= TargetBlocksSpacingSeconds * PastBlocksMass;
                PastRateAdjustmentRatio			= double(1);
                if (BlockReading->nHeight > 48300) {
                                if (PastRateActualSeconds < 1) { PastRateActualSeconds = 1; }
                        } else {
                                if (PastRateActualSeconds < 0) { PastRateActualSeconds = 0; }
                        }
                if (PastRateActualSeconds != 0 && PastRateTargetSeconds != 0) {
                    PastRateAdjustmentRatio = double(PastRateTargetSeconds) / double(PastRateActualSeconds);
                    }
                    EventHorizonDeviation = 1 + (0.7084 * pow((double(PastBlocksMass)/double(14.4)), -1.228));
                    EventHorizonDeviationFast = EventHorizonDeviation;
                    EventHorizonDeviationSlow = 1 / EventHorizonDeviation;
                
                if (PastBlocksMass >= PastBlocksMin) {
                        if ((PastRateAdjustmentRatio <= EventHorizonDeviationSlow) || (PastRateAdjustmentRatio >= EventHorizonDeviationFast)) { assert(BlockReading); break; }
                }
                if (BlockReading->pprev == NULL) { assert(BlockReading); break; }
                BlockReading = BlockReading->pprev;
        }
        
        CBigNum bnNew(PastDifficultyAverage);
        if (PastRateActualSeconds != 0 && PastRateTargetSeconds != 0) {
                bnNew *= PastRateActualSeconds;
                bnNew /= PastRateTargetSeconds;
        }
    if (bnNew > bnProofOfWorkLimit) { bnNew = bnProofOfWorkLimit; }
        
    /// debug print
    printf("Difficulty Retarget - Kimoto Gravity Well\n");
    printf("PastRateAdjustmentRatio = %g\n", PastRateAdjustmentRatio);
    printf("Before: %08x %s\n", BlockLastSolved->nBits, CBigNum().SetCompact(BlockLastSolved->nBits).getuint256().ToString().c_str());
    printf("After: %08x %s\n", bnNew.GetCompact(), bnNew.getuint256().ToString().c_str());
        
        return bnNew.GetCompact();
}

unsigned int static GetNextWorkRequired_V2(const CBlockIndex* pindexLast, const CBlock *pblock)
{
        static const int64 BlocksTargetSpacing = 2.5 * 60; // 120 seconds
        unsigned int TimeDaySeconds = 60 * 60 * 24;
        int64 PastSecondsMin = TimeDaySeconds * 0.25;
        int64 PastSecondsMax = TimeDaySeconds * 7;
        uint64 PastBlocksMin = PastSecondsMin / BlocksTargetSpacing;
        uint64 PastBlocksMax = PastSecondsMax / BlocksTargetSpacing;
        
        return KimotoGravityWell(pindexLast, pblock, BlocksTargetSpacing, PastBlocksMin, PastBlocksMax);
}

unsigned int static GetNextWorkRequired(const CBlockIndex* pindexLast, const CBlock *pblock)
{
        int DiffMode = 1;
        if (fTestNet) {
                if (pindexLast->nHeight+1 >= 50) { DiffMode = 2; }
        }
        else {
                if (pindexLast->nHeight+1 >= 20333) { DiffMode = 2; }
        }
        
        if (DiffMode == 1) { return GetNextWorkRequired_V1(pindexLast, pblock); }
        else if (DiffMode == 2) { return GetNextWorkRequired_V2(pindexLast, pblock); }
        return GetNextWorkRequired_V2(pindexLast, pblock);
}



